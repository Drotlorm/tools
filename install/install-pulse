#!/bin/bash

if [ $# -eq 0 ]
        then
        echo "Needs Pulse repository url"
        exit 1
fi
# To be defined
PULSE_REPO_URL=$1
PULSE_VERSION="3.1"
ROOT_PASSWORD="siveo"
ORGANISATION="Siveo"
DEBIAN_VERSION=`cat /etc/*-release|grep VERSION_ID |cut -d '"' -f2`
DOMAIN=`hostname -d`
DNS_SERVER=`grep -m 1 nameserver /etc/resolv.conf | awk '{print $2}' | cut -d : -f 1`
GATEWAY_ADDRESS=`ip route | awk '/default/ { print $3 }'`
PULSEMAIN_IP='192.168.1.6'
SMTP="smtp.siveo.net:465"
MAIL_ADDRESS="support@siveo.net"

ask() {
	local TEXT=$1
	local OPTION1=$2
	local OPTION2=$3
	local RESULT=N
    while [ ${RESULT} == "N" ]; do
        local PROMPT="$OPTION1/$OPTION2"
        # Ask the question - use /dev/tty in case stdin is redirected from somewhere else
        read -p "${TEXT} [${PROMPT}] " REPLY </dev/tty
        # Check if the reply is valid
        case "${REPLY}" in
            ${OPTION1^^}|${OPTION1,,})
            	RESULT=Y
            	echo ${OPTION1,,}
            	;;
            ${OPTION2^^}|${OPTION2,,})
            	RESULT=Y
            	echo ${OPTION2,,}
            	;;
        esac
    done
}

get_user_input() {
	local TEXT=$1
	while [[ ${RESULT} == '' ]]; do
		read -p "${TEXT} " RESULT
	done
	echo ${RESULT}
}

choose_network_interface() {
	local INTERFACES=`ip -o link show | awk '{print $2,$9}' | grep UP | cut -d : -f 1 | awk -vORS=' ' '{print $1}'`
	local RESULT=N
	local CHOICE_INTERFACE_TEXT=$1
	while [ ${RESULT} == "N" ]; do
		read  -p "${CHOICE_INTERFACE_TEXT} (${INTERFACES}): " INTERFACE
		if [ ! -z ${INTERFACE} ] && [[ ${INTERFACES} == *"${INTERFACE} "* ]]; then
			RESULT=Y
			echo ${INTERFACE}
		else
			RESULT=N
		fi
	done
}

get_multisite_entity() {
	local EXISTING_ENTITIES="echo \"select name from glpi_entities;\" |mysql glpi -s | grep -v \"Root entity\" | awk -vORS=' ' '{print $1}'"
	local LIST_ENTITIES=`ssh ${PULSEMAIN_IP} "${EXISTING_ENTITIES}"`
	local RESULT=N
	while [  ${RESULT} == "N" ]; do
	read  -p "Enter the new entity name for the new site (current entitites: $LIST_ENTITIES): " 'MULTISITE_ENTITY'
		if [ ! -z ${MULTISITE_ENTITY} ] && [[ ${LIST_ENTITIES} != *"${MULTISITE_ENTITY} "* ]]; then
			RESULT=Y
		else
			RESULT=N
		fi
	done
	echo ${MULTISITE_ENTITY}
}

get_user_options() {
	local NB_INTERFACES=`ip -o link show | awk '{print $2,$9}' | grep UP | cut -d : -f 1 | awk -vORS=' ' '{print $1}' | wc -w`
	
	echo "====================================================================="
	if [ "x$NB_INTERFACES" != "x1" ]; then
		INTERFACE=$(choose_network_interface "More than one network interface detected. Choose the interface having access to Pulse clients")
	else
		INTERFACE=`ip -o link show | awk '{print $2,$9}' | grep UP | cut -d : -f 1`
	fi
	INSTALL_TYPE=$(ask "Is the main Pulse server installation (p) or a multi-site installation (m)?" p m)
	MAIL_PASSWORD=$(get_user_input "Enter the monitoring mail password:")
	
	if [[ ${INSTALL_TYPE} == "p" ]]; then
		MAIN_DHCP=$(ask "DHCP will be enabled ?" y n)
		MAIN_PXE=$(ask "PXE will be enabled ?" y n)
        MAIN_ENTITY=$(get_user_input "Main entity name for GLPI:")
	else
		INTERFACE_TO_PULSE=$(choose_network_interface "Choose the interface connected to Pulse server")
		REMOTE_BACKUPPC=$(ask "BACKUPPC will be enable ?" y n)
		REMOTE_DHCP=$(ask "DHCP will be enabled ?" y n)
		REMOTE_PXE=$(ask "PXE will be enabled ?" y n)
        MULTISITE_ENTITY=$(get_multisite_entity)
	fi

	echo "====================================================================="
}

check_network_config() {
	echo "Checking network settings..."
		
	# Make sure that domain name is properly set
	if [ -z ${DOMAIN} ]; then
		echo "Please configure the domain"
		exit 1
	# Make sure that DNS server is properly set
	elif [ -z ${DNS_SERVER} ]; then
		echo "Please configure the DNS server"
		exit 1
	fi
	IP_ADDRESS=`ifconfig ${INTERFACE} | grep -w inet | grep -v 127.0.0.1 | awk '{print $2}' | cut -d ":" -f 2`
	NETWORK_ADDRESS=`echo ${IP_ADDRESS} | awk -F '.' '{printf("%d.%d.%d.0", $1, $2, $3)}'`
	NETMASK=`ifconfig ${INTERFACE} | grep -w inet |grep -v 127.0.0.1| awk '{print $4}' | cut -d ":" -f 2`
	BCAST_ADDRESS=`ip address show ${INTERFACE} | grep 'inet .* brd ' | head -1 | sed -e 's/^.* brd \([0-9\.]*\) .*$/\1/'`
	IP_REMOTE_SERVER=`ifconfig ${INTERFACE_TO_PULSE} | grep -w inet | grep -v 127.0.0.1 | awk '{print $2}' | cut -d ":" -f 2`
	echo "====================================================================="
	echo "PULSE_REPO_URL		: ${PULSE_REPO_URL}"
	echo "PULSE_VERSION		: ${PULSE_VERSION}"
	echo "ROOT_PASSWORD		: ${ROOT_PASSWORD}"
	echo "ORGANISATION		: ${ORGANISATION}"
	echo "DEBIAN_VERSION		: ${DEBIAN_VERSION}"
	echo "DOMAIN			: ${DOMAIN}"
	echo "INTERFACE		: ${INTERFACE}"
	echo "IP_ADDRESS		: ${IP_ADDRESS}"
	echo "NETWORK_ADDRESS		: ${NETWORK_ADDRESS}"
	echo "NETMASK			: ${NETMASK}"
	echo "BCAST_ADDRESS		: ${BCAST_ADDRESS}"
	echo "GATEWAY_ADDRESS		: ${GATEWAY_ADDRESS}"
	echo "DNS_SERVER		: ${DNS_SERVER}"
	echo "MAIN_ENTITY		: ${MAIN_ENTITY}"
	if [[ ${INSTALL_TYPE} == "m" ]]; then
		echo "============================MULTISTE================================="
		echo "PULSEMAIN_IP		: ${PULSEMAIN_IP}"
		echo "INTERFACE_TO_PULSE	: ${INTERFACE_TO_PULSE}"
		echo "IP_REMOTE_SERVER	: ${IP_REMOTE_SERVER}"
		echo "MULTISITE_ENTITY	: ${MULTISITE_ENTITY}"
		echo "====================================================================="
	fi
	echo "### Checking network settings... Done"
	
	local CORRECT=$(ask "Are the above settings correct?" y n)
	if [[ ${CORRECT} == "n" ]]; then
		echo "Edit the script to define the proper values for the above settings" 
		exit 0
	fi
}

configure_repos() {
	echo "Configuring all necessary repos..."
	
	case ${DEBIAN_VERSION} in 
		"7")
			echo "deb ${PULSE_REPO_URL}" > /etc/apt/sources.list.d/pulse.list
			echo "deb http://free.nchc.org.tw/drbl-core drbl stable" > /etc/apt/sources.list.d/drbl.list
			wget -q http://drbl.org/GPG-KEY-DRBL -O- | apt-key add -
			;;
		"8")
			echo "deb ${PULSE_REPO_URL}" > /etc/apt/sources.list.d/pulse.list
			;;
		*)
			;;
	esac
	
	apt-get update
	
	echo "### Configuring all necessary repos... Done"
}

configure_apt_settings() {
	echo "Defining a few settings for apt..."
	
	echo 'APT::Install-Recommends "0";' > /etc/apt/apt.conf.d/99local-config
	echo 'APT::Install-Suggests "0";' >> /etc/apt/apt.conf.d/99local-config
	echo 'APT::Get::AllowUnauthenticated "true";' >> /etc/apt/apt.conf.d/99local-config
	echo 'Acquire::PDiffs "false";' >> /etc/apt/apt.conf.d/99local-config
	
	echo "### Defining a few settings for apt... Done"
}

install_system_tools() {
	echo "Installing system tools..."
	
	# Install needed tools
	apt-get -y install multitail vim rsync ssmtp xfs-defrag

	# Configure vim
	sed 's/^"syntax on$/syntax on/' -i /etc/vim/vimrc

	# Configure mail monitoring
	echo "mailhub=${SMTP}" > /etc/ssmtp/ssmtp.conf
	echo "root=${MAIL_ADDRESS}" >> /etc/ssmtp/ssmtp.conf
	echo "AuthUser=${MAIL_ADDRESS}" >> /etc/ssmtp/ssmtp.conf
	echo "AuthPass=${MAIL_PASSWORD}" >> /etc/ssmtp/ssmtp.conf
	echo "FromLineOverride=YES" >> /etc/ssmtp/ssmtp.conf
	echo "UseTLS=YES" >> /etc/ssmtp/ssmtp.conf
	echo "root:`hostname -f`@siveo.net" > /etc/ssmtp/revaliases

	# Configure XFS-Defrag
	sed 's/^CRON=0$/CRON=1/' -i /etc/xfs-defrag.conf
	sed "s/.*MAILTO=.*/MAILTO=${MAIL_ADDRESS}/" -i /etc/xfs-defrag.conf
	sed "s/mail -s/mail -a \"From: ${ORGANISATION} <${ORGANISATION}@siveo.net>\" -s /g" -i /usr/sbin/xfs-defrag

	echo "### Installing system tools... Done"
}

configure_mysql_access() {
	echo "Defining credentials to access mysql database..."
	
	rm -f /root/.my.cnf
	touch /root/.my.cnf
	chmod 600 /root/.my.cnf
	echo -e "[mysql]\nuser=root\npassword=${ROOT_PASSWORD}" >> /root/.my.cnf
	echo -e "\n[mysqladmin]\nuser=root\npassword=${ROOT_PASSWORD}" >> /root/.my.cnf
	echo -e "\n[mysqlcheck]\nuser=root\npassword=${ROOT_PASSWORD}" >> /root/.my.cnf
	echo -e "\n[mysqldump]\nuser=root\npassword=${ROOT_PASSWORD}" >> /root/.my.cnf 
	
	echo "### Defining credentials to access mysql database... Done"
}

prepare_debian() {
	# Configure debian OS for Pulse
	ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ""
	configure_repos
	configure_apt_settings
	install_system_tools
}

install_pulse2-setup_deps() {
	echo "Installing tools needed by pulse2setup..."
	
	# Install rng-tools used by pulse2-setup
	apt-get -y install rng-tools
	grep ^HRNGDEVICE /etc/default/rng-tools
	if [ ! $? -eq 0 ]; then
		echo "HRNGDEVICE=/dev/urandom" >> /etc/default/rng-tools
	fi
	service rng-tools restart
	
	# Install python network libraries used by pulse2-setup
	apt-get -y install python-netifaces python-netaddr
	
	echo "### Installing tools needed by pulse2setup... Done"
}

install_apache() {
	echo "Installing Apache2..."
	
	# Install apache2 and php used by Pulse
	apt-get -y install apache2 php5
	# Configure php to allow upload of files of 200M max
	sed -i 's/^upload_max_filesize.*$/upload_max_filesize = 200M/' /etc/php5/apache2/php.ini
	sed -i 's/^post_max_size.*$/post_max_size = 200M/' /etc/php5/apache2/php.ini
	service apache2 restart
	
	echo "### Installing Apache2... Done"
}

install_ldap_server() {
	echo "Installing LDAP server..."
	
	# Define a few settings for ldap-server
	echo "slapd slapd/password1 password ${ROOT_PASSWORD}" | debconf-set-selections
	echo "slapd slapd/password2 password ${ROOT_PASSWORD}" | debconf-set-selections
	
	# Install ldap-server
	apt-get -y install ldap-server
	if [ ! $? -eq 0 ]; then
		echo "LDAP server install failed"
		exit 1
	fi
	
	echo "### Installing LDAP server... Done"
}

install_mysql_server() {
	echo "Installing MySQL server..."
	
	# Define a few settings for mysql-server
	echo "mysql-server-5.5 mysql-server/root_password password ${ROOT_PASSWORD}" | debconf-set-selections
	echo "mysql-server-5.5 mysql-server/root_password_again password ${ROOT_PASSWORD}" | debconf-set-selections
	
	# Install mysql-server
	apt-get -y install mysql-server
	if [ ! $? -eq 0 ]; then
		echo "MySQL server install failed"
		exit 1
	fi
	
	echo "### Installing MySQL server... Done"
}

install_backuppc() {
	echo "Installing backuppc..."
	
	# Define a few settings for backuppc
	useradd backuppc -md /var/lib/backuppc -s /bin/bash
	echo "backuppc  backuppc/reconfigure-webserver  multiselect     apache2" | debconf-set-selections
	echo "backuppc  backuppc/tmppass password ${ROOT_PASSWORD}" | debconf-set-selections
	echo "backuppc  backuppc/configuration-note     note" | debconf-set-selections
	echo "backuppc  backuppc/restart-webserver      boolean true" | debconf-set-selections
	echo "backuppc  backuppc/reconfigure-webserver  multiselect" | debconf-set-selections
	
	# Install backuppc
	apt-get -y install backuppc libfile-rsyncp-perl
	if [ ! $? -eq 0 ]; then
		echo "backuppc install failed"
		exit 1
	fi

	# Copy Pulse ssh key 
	cp -rf /root/.ssh /var/lib/backuppc/
	chown -R backuppc:backuppc /var/lib/backuppc/
	
	# Configure Apache for backuppc
	if [ ! -e /etc/apache2/sites-available/backuppc.conf ]; then
		ln -s /etc/backuppc/apache.conf /etc/apache2/sites-available/backuppc.conf
	fi
	a2ensite backuppc.conf
	
	if [[ ${INSTALL_TYPE} == "p" ]]; then
		# Allow MMC to connect to backuppc
		sed "$ i\        Allow from 127.0.0.1" -i /etc/apache2/sites-available/backuppc.conf
		sed "$ i\        Satisfy any" -i /etc/apache2/sites-available/backuppc.conf
	fi
	
	service apache2 restart
	htpasswd -b -c /etc/backuppc/htpasswd backuppc ${ROOT_PASSWORD}
	
	echo "### Installing backuppc... Done"
}

install_glpi() {
	echo "Installing GLPI..."
	
	# Define a few settings for glpi
	echo "glpi glpi/password-confirm password ${ROOT_PASSWORD}" | debconf-set-selections
	echo "glpi glpi/mysql/app-pass password ${ROOT_PASSWORD}" | debconf-set-selections
	echo "glpi glpi/mysql/admin-pass password ${ROOT_PASSWORD}" | debconf-set-selections
	echo "glpi glpi/purge boolean false" | debconf-set-selections
	echo "glpi glpi/db/dbname string glpi" | debconf-set-selections
	echo "glpi glpi/dbconfig-reinstall boolean false" | debconf-set-selections
	echo "glpi glpi/db/app-user string glpi" | debconf-set-selections
	echo "glpi glpi/dbconfig-install boolean true" | debconf-set-selections
	echo "glpi glpi/webserver multiselect apache, apache-ssl, apache-perl, apache2" | debconf-set-selections
	echo "glpi glpi/configuration note" | debconf-set-selections
	
	# Install glpi
	apt-get -y install glpi fusioninventory-for-glpi glpi-plugin-webservices php5-xmlrpc
	if [ ! $? -eq 0 ]; then
		echo "GLPI install failed"
		exit 1
	fi
	
	echo "### Installing GLPI... Done"
}

install_atftpd() {
	echo "Installing atftp server..."
	
	apt-get -y install atftpd
	if [ ! $? -eq 0 ]; then
		echo "atftpd install failed"
		exit 1
	fi
	
	echo "### Installing atftp server... Done"
}

install_isc_dhcp_server() {
	echo "Installing DHCP server..."
	
	apt-get -y install isc-dhcp-server
	if [ ! $? -eq 0 ]; then
		echo "isc-dhcp-server install failed"
		exit 1
	fi
	
	echo "### Installing DHCP server... Done"
}

install_samba() {
	echo "Installing Samba server..."
	
	apt-get -y install samba
	if [ ! $? -eq 0 ]; then
		echo "samba install failed"
		exit 1
	fi
	
	echo "### Installing Samba server... Done"
}

install_nfs_kernel_server() {
	echo "Installing NFS server..."
	
	apt-get -y install nfs-kernel-server
	if [ ! $? -eq 0 ]; then
		echo "nfs-kernel-server install failed"
		exit 1
	fi
	
	echo "### Installing NFS server... Done"
}

install_clonezilla() {
	echo "Installing clonezilla..."
	
	apt-get -y install clonezilla pulse2-davos-client
	if [ ! $? -eq 0 ]; then
		echo "clonezilla install failed"
		exit 1
	fi
	
	echo "### Installing clonezilla... Done"
}

install_pulse_dependencies() {
	# Install components needed by Pulse
	install_pulse2-setup_deps
	install_apache
	install_ldap_server
	install_mysql_server
	install_backuppc
	install_glpi
	install_samba
	install_nfs_kernel_server
	install_clonezilla
	configure_mysql_access
}

install_pulse() {
	echo "Installing Pulse..."
	
	apt-get -y install pulse2 mmc-web-backuppc mmc-web-dashboard mmc-web-glpi mmc-web-ppolicy mmc-web-report mmc-web-services mmc-web-support mmc-web-update pulse2-imaging-server pulse2-dlp-server pulse2-uuid-resolver python-mmc-backuppc python-mmc-dashboard python-mmc-glpi python-mmc-ppolicy python-mmc-report python-mmc-services python-mmc-support python-mmc-update
	if [ ! $? -eq 0 ]; then
		echo "pulse install failed"
		exit 1
	fi
	
	# Enable services
	sed 's/no/yes/' -i /etc/default/pulse2-cm /etc/default/pulse2-inventory-server /etc/default/pulse2-launchers /etc/default/pulse2-package-server /etc/default/pulse2-scheduler /etc/default/mmc-agent
	
	echo "### Installing Pulse... Done"
}

configure_atftpd() {
	echo "Configuring atftp server..."
	
	sed -i 's!^USE_INETD.*$!USE_INETD=false!' /etc/default/atftpd
	sed -i 's!/srv/tftp!--daemon --port 69 /var/lib/pulse2/imaging!' /etc/default/atftpd
	service atftpd restart
	
	echo "### Configuring atftp server... Done"
}

configure_backuppc() {
	echo "Configuring backuppc..."
	
	# Allow MMC to connect to backuppc server
	grep -Gq Satisfy /etc/apache2/sites-available/backuppc.conf
	if [ $? -ne 0 ]; then
		sed "$ i\        Allow from ${PULSEMAIN_IP}" -i /etc/apache2/sites-available/backuppc.conf
		sed "$ i\        Satisfy any" -i /etc/apache2/sites-available/backuppc.conf
	fi
	service apache2 restart
	
	# Add new site backuppc to Pulse database. Done on main Pulse server.
	local ID=$(ssh ${PULSEMAIN_IP} "echo 'SELECT id FROM imaging.Entity  ORDER BY id DESC LIMIT 1'|mysql -s")
	ID='UUID'${ID}
	local SSH_COMMAND="echo \"INSERT INTO backup_servers (entity_uuid,backupserver_url) VALUES ('${ID}','http://${IP_REMOTE_SERVER}/backuppc/index.cgi');\"|mysql backuppc"
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND} 
	
	# Copy main Pulse backuppc key to local backuppc user
	scp root@${PULSEMAIN_IP}:/var/lib/backuppc/.ssh/id_rsa /var/lib/backuppc/.ssh/
	
	echo "### Configuring backuppc... Done"
}

configure_isc_dhcp_server() {
	echo "Configuring DHCP server..."
	
	local DHCP_RANGE_START=`echo ${IP_ADDRESS} | awk -F '.' '{printf("%d.%d.%d.100", $1, $2, $3)}'`
	local DHCP_RANGE_END=`echo ${IP_ADDRESS} | awk -F '.' '{printf("%d.%d.%d.200", $1, $2, $3)}'`
	
	# Configure the DHCP server
	cp /usr/share/doc/mmc/contrib/imaging-server/dhcpd.conf /etc/dhcp/
	sed -i "s/^INTERFACES=.*/INTERFACES=${INTERFACE}/" /etc/default/isc-dhcp-server
	sed -i  "s/^.*\bpool\b.*$/    pool\ {/" /etc/dhcp/dhcpd.conf
	sed -i "s/##PULSE2_NET##/${NETWORK_ADDRESS}/" /etc/dhcp/dhcpd.conf
	sed -i "s/##PULSE2_NETMASK##/${NETMASK}/" /etc/dhcp/dhcpd.conf
	sed -i "s/\"##PULSE2_BCAST##\"/${BCAST_ADDRESS}/" /etc/dhcp/dhcpd.conf
	sed -i "s/##PULSE2_DOMAIN##/${DOMAIN}/" /etc/dhcp/dhcpd.conf
	sed -i "s/\"##PULSE2_DNS##\"/${DNS_SERVER}/" /etc/dhcp/dhcpd.conf
	sed -i "s/\"##PULSE2_GW##\"/${GATEWAY_ADDRESS}/" /etc/dhcp/dhcpd.conf
	sed -i "s/##PULSE2_START##/${DHCP_RANGE_START}/" /etc/dhcp/dhcpd.conf
	sed -i "s/##PULSE2_END##/${DHCP_RANGE_END}/" /etc/dhcp/dhcpd.conf
	sed -i "s/##PULSE2_IP##/${IP_ADDRESS}/" /etc/dhcp/dhcpd.conf
	service isc-dhcp-server restart
	
	echo "### Configuring DHCP server... Done"
}

configure_samba() {
	echo "Configuring Samba server..."
	
	# Create needed shares and setup root password
	cp /usr/share/doc/pulse2/contrib/samba/smb.conf /etc/samba/
	echo -ne "${ROOT_PASSWORD}\n${ROOT_PASSWORD}\n" | smbpasswd -a -s root
	service samba restart
	
	echo "### Configuring Samba server... Done"
}

configure_nfs_kernel_server() {
	echo "Configuring NFS server..."
	
	# Create needed exports
	cp /usr/share/doc/mmc/contrib/imaging-server/exports /etc/
	service nfs-kernel-server restart
	
	echo "### Configuring NFS server... Done"
}

configure_clonezilla() {
	echo "Configuring clonezilla..."
	
	# Create the folder needed for clonezilla
	[ -L /home/partimag ] && rm -f /home/partimag
	[ -d /home/partimag ] && rmdir /home/partimag
	ln -s /var/lib/pulse2/imaging/masters/ /home/partimag
	
	echo "### Configuring clonezilla... Done"
}

configure_mmc() {
	echo "Configuring mmc..."
	
	# Create /home/archives if needed
	[ ! -d /home/archives ] &&  mkdir /home/archives
	
	# Configure LDAP for MMC
	mmc-add-schema /usr/share/doc/mmc/contrib/base/mmc.schema /etc/ldap/schema/
	grep "local4.* /var/log/ldap.log" /etc/syslog.conf
	if [ ! $? -eq 0 ]; then
		echo "local4.* /var/log/ldap.log" >> /etc/syslog.conf
	fi
	touch /var/log/ldap.log
	service rsyslog restart
	service slapd restart
	
	# Configure Apache for MMC
	if [ ! -e /etc/apache2/sites-available/mmc.conf ]; then
		ln -s /etc/mmc/apache/mmc.conf /etc/apache2/sites-available/
	fi
	a2ensite mmc.conf
	service apache2 restart
	
	# Configure base.ini
	local BASE_DN=`slapcat | grep -m 1 dn |awk '{print $2}'`
	sed "s/^baseDN = .*$/baseDN = ${BASE_DN}/" -i /etc/mmc/plugins/base.ini
	sed "s/^password = .*$/password = ${ROOT_PASSWORD}/" -i /etc/mmc/plugins/base.ini
	sed 's/^disabled_panels.*/disabled_panels = shortcuts appstream/' -i /etc/mmc/plugins/dashboard.ini
	sed 's/^disable = 0/disable = 1/' -i /etc/mmc/plugins/support.ini /etc/mmc/plugins/update.ini
	service mmc-agent restart
	echo "### Configuring mmc... Done"
}

configure_pulse_dependencies() {
	# Configure components needed by Pulse
	configure_samba
	configure_nfs_kernel_server
	configure_clonezilla
	configure_mmc
}

reset_glpi_db() {
	echo "Resetting glpi database for Pulse..."
	
	# Reinstall GLPI database
	echo "drop database glpi;" | mysql -uroot
	echo "drop user 'glpi'@'localhost';" | mysql -uroot
	echo "glpi  glpi/dbconfig-reinstall boolean true" | debconf-set-selections
	echo "glpi  glpi/mysql/admin-pass password ${ROOT_PASSWORD}" | debconf-set-selections
	dpkg-reconfigure -fnoninteractive glpi
	
	# Clean glpi users/profiles apart from glpi superadmin
	local GLPI_SUPERADMIN_ID=`echo "select name,id from glpi_users;" | mysql -uroot glpi --silent | grep "^glpi[[:space:]]\+" | awk -F'\t' '{ print $2 }'`
	echo "${GLPI_SUPERADMIN_ID}" | grep -q '^[0-9]\+$'
	if [ ! $? -eq 0 ]; then
		echo "Unable to find super-admin ID in GLPI database."
		exit 1
	fi
	echo "delete from glpi_users where name not like 'glpi';" | mysql -uroot glpi
	echo "delete from glpi_profiles_users where id not like '${GLPI_SUPERADMIN_ID}';" | mysql -uroot glpi
	
	# Rename superadmin name to root and reset the password
	echo "update glpi_users set name = 'root' where name = 'glpi';" | mysql -uroot glpi
	echo "update glpi_users set password = MD5('${ROOT_PASSWORD}') where name = 'root';" | mysql -uroot glpi
	
	# Configure Organisation / Entity
	echo "UPDATE glpi_entities set completename='${ORGANISATION}' where id=0;" | mysql glpi
	echo "INSERT INTO glpi_entities (id,entities_id,level,name,completename) VALUES (1,0,2,'${MAIN_ENTITY}','${ORGANISATION} > ${MAIN_ENTITY}');" | mysql glpi
	echo "INSERT INTO glpi_locations (id,entities_id,name,completename) VALUES (1,0,'${ORGANISATION}','${ORGANISATION}');" | mysql glpi
	
	# Enable LDAP auth for GLPI
	local BASE_DN=`slapcat | grep -m 1 dn |awk '{print $2}'`
	echo "insert into glpi_authldaps values (1,'LocalLDAP','127.0.0.1','${BASE_DN}','',389,'','uid',0,'','(&(objectClass=posixGroup)(cn=GLPI-*))',1,'memberuid','mail','sn','givenname','telephonenumber','','mobile','',0,0,0,'',NULL,'preferredlanguage','','','2012-11-02 17:03:27','',1,1,'','','','','','','','','');" | mysql -uroot glpi
	
	# Enable GLPI FusionInventory plugin
	local SuperAdmin=`mysql -N -s -e 'SELECT id FROM glpi_profiles WHERE name="Super-Admin"' glpi;`
	echo "INSERT INTO glpi_profilerights (profiles_id,name,rights) VALUES \
        (${SuperAdmin},'plugin_fusioninventory_agent',23), \
        (${SuperAdmin},'plugin_fusioninventory_blacklist',23), \
        (${SuperAdmin},'plugin_fusioninventory_collect',23), \
        (${SuperAdmin},'plugin_fusioninventory_configsecurity',31), \
        (${SuperAdmin},'plugin_fusioninventory_configuration',3), \
        (${SuperAdmin},'plugin_fusioninventory_credential',23), \
        (${SuperAdmin},'plugin_fusioninventory_credentialip',23), \
        (${SuperAdmin},'plugin_fusioninventory_deploymirror',23), \
        (${SuperAdmin},'plugin_fusioninventory_esx',23), \
        (${SuperAdmin},'plugin_fusioninventory_group',23), \
        (${SuperAdmin},'plugin_fusioninventory_importxml',4), \
        (${SuperAdmin},'plugin_fusioninventory_iprange',23), \
        (${SuperAdmin},'plugin_fusioninventory_lock',23), \
        (${SuperAdmin},'plugin_fusioninventory_menu',1), \
        (${SuperAdmin},'plugin_fusioninventory_networkequipment',23), \
        (${SuperAdmin},'plugin_fusioninventory_package',23), \
        (${SuperAdmin},'plugin_fusioninventory_printer',23), \
        (${SuperAdmin},'plugin_fusioninventory_remotecontrol',1), \
        (${SuperAdmin},'plugin_fusioninventory_reportnetworkequipment',1), \
        (${SuperAdmin},'plugin_fusioninventory_reportprinter',1), \
        (${SuperAdmin},'plugin_fusioninventory_rulecollect',23), \
        (${SuperAdmin},'plugin_fusioninventory_ruleentity',23), \
        (${SuperAdmin},'plugin_fusioninventory_ruleimport',23), \
        (${SuperAdmin},'plugin_fusioninventory_rulelocation',23), \
        (${SuperAdmin},'plugin_fusioninventory_task',23), \
        (${SuperAdmin},'plugin_fusioninventory_unmanaged',31), \
        (${SuperAdmin},'plugin_fusioninventory_wol',1)" | mysql glpi
    php /usr/share/glpi/plugins/fusioninventory/scripts/cli_install.php
    echo "update glpi_plugin_fusioninventory_entities SET  agent_base_url = 'http://127.0.0.1/glpi' , transfers_id_auto = '1'  WHERE id='1';" | mysql glpi
    chown -R www-data /var/lib/glpi/files/_plugins/fusioninventory
    # Add a few blacklists
	echo "INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('2', '00020003-0004-0005-0006-000700080009');" | mysql glpi
	echo "INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('2', 'Not Settable');" | mysql glpi
	echo "INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('1', 'Not Applicable');" | mysql glpi
	echo "INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('1', '-');" | mysql glpi
	echo "INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('1', 'To be filled by O.E.M.');" | mysql glpi
	# Two new rules for computers linking
	echo "UPDATE glpi_rules SET ranking = ranking+2 WHERE ranking > 2 AND sub_type = 'PluginFusioninventoryInventoryRuleImport'" | mysql glpi
	echo "INSERT INTO glpi_rules VALUES('',0,'PluginFusioninventoryInventoryRuleImport',3,'Computer mac + no serial + no uuid','','AND',1,'','NULL',0,'NULL',0);" | mysql glpi
	echo "INSERT INTO glpi_rules VALUES('',0,'PluginFusioninventoryInventoryRuleImport',4,'Computer uuid + mac','','AND',1,'','NULL',0,'NULL',0);" | mysql glpi
	local maxid=`echo "SELECT MAX(id) FROM glpi_rules" | mysql -s glpi`
	local maxidmin=`expr ${maxid} - 1`
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxidmin}','serial',9,'1')" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxidmin}','uuid',9,'1')" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxidmin}','itemtype',0,'Computer')" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxidmin}','mac',10,'1')" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxidmin}','mac',8,'1')" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxid}','uuid',10,'1')" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxid}','uuid',8,'1')" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxid}','itemtype',0,'Computer')" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxid}','mac',10,'1')" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES('','${maxid}','mac',8,'1')" | mysql glpi
	echo "INSERT INTO glpi_ruleactions VALUES('','${maxidmin}','assign','_fusion',1)" | mysql glpi
	echo "INSERT INTO glpi_ruleactions VALUES('','${maxid}','assign','_fusion',1)" | mysql glpi
	# One rule for setting the default entity
	echo "INSERT INTO glpi_rules VALUES ('','','PluginFusioninventoryInventoryRuleEntity',1,'${MAIN_ENTITY}','','AND',1,'','',0,'',0);" | mysql glpi
	echo "INSERT INTO glpi_rulecriterias VALUES ('', (SELECT id FROM glpi_rules WHERE sub_type = 'PluginFusioninventoryInventoryRuleEntity' ),'tag',0,'*');" | mysql glpi
	echo "INSERT INTO glpi_ruleactions VALUES ('',(SELECT id FROM glpi_rules WHERE sub_type = 'PluginFusioninventoryInventoryRuleEntity' ),'assign','entities_id','1');" | mysql glpi
	
	# Enable GLPI Plugin WebServices
	echo "CREATE TABLE glpi_plugin_webservices_clients ( id INT NOT NULL AUTO_INCREMENT, entities_id INT NOT NULL DEFAULT '0', is_recursive TINYINT( 1 ) NOT NULL DEFAULT '0', name VARCHAR( 255 ) NOT NULL , pattern VARCHAR( 255 ) NOT NULL , ip_start BIGINT NULL , ip_end BIGINT NULL , ipv6  VARCHAR( 255 ) NULL, username VARCHAR( 255 ) NULL , password VARCHAR( 255 ) NULL , do_log TINYINT NOT NULL DEFAULT '0', debug TINYINT NOT NULL DEFAULT '0', is_active TINYINT NOT NULL DEFAULT '0', deflate TINYINT NOT NULL DEFAULT '0', comment TEXT NULL , PRIMARY KEY (id), KEY entities_id (entities_id) );"| mysql glpi
	echo "INSERT INTO glpi_plugin_webservices_clients (id, entities_id, is_recursive, name, pattern, ip_start, ip_end , ipv6 , do_log, is_active, comment) VALUES (NULL, 0, 1, 'Local','.*', INET_ATON('127.0.0.1'), INET_ATON('127.0.0.1'), '::1',1, 1, 'Allow all from local');" | mysql glpi
	local webservicesId=`echo "SELECT id FROM glpi_plugins WHERE directory=\"webservices\"" | mysql -s glpi`
	echo "UPDATE glpi_plugins SET state='1' WHERE id='${webservicesId}';" | mysql glpi

	# Allow only Pulse to use the GLPI Plugin Webservices
	IFS=. read -r a b c d <<< "${IP_ADDRESS}"
	IP_DECIMAL=`printf '%s\n' "$((a * 256 ** 3 + b * 256 ** 2 + c * 256 +d))"`
	echo "UPDATE glpi_plugin_webservices_clients SET name='Pulse Webservices', ip_start='${IP_DECIMAL}', ip_end='${IP_DECIMAL}', comment='Allow only Pulse IP' WHERE id='1';" | mysql -s glpi
	
	#Clean GLPI installer file
	rm -rf /usr/share/glpi/install/install.php	

	echo "### Resetting glpi database for Pulse... Done"
}

reset_pulse_db() {
	echo "Resetting Pulse database..."
	
	# Run pulse2-setup
	pulse2-setup -b -R --reset-db --mysql-passwd=${ROOT_PASSWORD} --glpi-enable --glpi-purge-machines --glpi-webservices-user=root --glpi-webservices-passwd=${ROOT_PASSWORD} --glpi-url=http://${IP_ADDRESS}/glpi --glpi-dbhost=localhost --glpi-dbname=glpi --glpi-dbuser=glpi --glpi-dbpasswd=${ROOT_PASSWORD} --external-ip-address=${IP_ADDRESS} --backuppc-ip=127.0.0.1 --backuppc-entity=UUID1 
	if [ ! $? -eq 0 ]; then
		echo "pulse2-setup failed"
		exit 1
	fi
	
	# Configure Launcher
	echo "[rsync]" >> /etc/mmc/pulse2/launchers/launchers.ini.local
	echo "rsync_path = /usr/bin/rsync" >> /etc/mmc/pulse2/launchers/launchers.ini.local
	echo "resume = True" >> /etc/mmc/pulse2/launchers/launchers.ini.local

	# Configure Davos
	echo "diskless_folder = davos" >>/etc/mmc/pulse2/package-server/package-server.ini.local
	echo "diskless_kernel = vmlinuz" >> /etc/mmc/pulse2/package-server/package-server.ini.local
	echo "diskless_initrd = initrd.img" >>/etc/mmc/pulse2/package-server/package-server.ini.local
	echo "UPDATE BootService SET value = 'kernel ##PULSE2_NETDEVICE##/##PULSE2_DISKLESS_DIR##/##PULSE2_DISKLESS_KERNEL## ##PULSE2_KERNEL_OPTS## ##PULSE2_REVO_RAW## ##PULSE2_DISKLESS_OPTS## davos_action=SAVE_IMAGE\ninitrd ##PULSE2_NETDEVICE##/##PULSE2_DISKLESS_DIR##/##PULSE2_DISKLESS_INITRD##' WHERE id=3;"| mysql imaging
	echo "UPDATE BootService SET value = 'kernel ##PULSE2_NETDEVICE##/##PULSE2_DISKLESS_DIR##/##PULSE2_DISKLESS_KERNEL## ##PULSE2_KERNEL_OPTS## ##PULSE2_DISKLESS_OPTS## davos_debug=1\ninitrd ##PULSE2_NETDEVICE##/##PULSE2_DISKLESS_DIR##/##PULSE2_DISKLESS_INITRD##' WHERE id = 4;" | mysql imaging
	
	# Restart all services
	for SERV in `ls /etc/init.d/mmc-agent; ls /etc/init.d/pulse2-*`; do $SERV restart; done
	
	# Associate imaging server with root entity and generate default menu
	echo "UPDATE ImagingServer SET associated=1 WHERE id=1;"| mysql imaging
	if [ ! $? -eq 0 ]; then
		echo "imaging server association failed"
		exit 1
	fi
	
	# Generate Pulse agents
	#/var/lib/pulse2/clients/generate-agents
	/var/lib/pulse2/clients/win32/generate-agent-pack.sh -i ${IP_ADDRESS} -t 
	if [ ! $? -eq 0 ]; then
		echo "pulse agents generation failed"
		exit 1
	fi
	
	echo "### Resetting Pulse database... Done"
}

configure_pulse() {
	# Configure or reconfigure Pulse
	
	# Initialise glpi database
	reset_glpi_db
	
	# Initialise Pulse database
	reset_pulse_db

	echo "### Restart Pulse services..."
	for SERV in pulse2-cm pulse2-dlp-server pulse2-inventory-server pulse2-launchers pulse2-package-server pulse2-scheduler mmc-agent
		do service $SERV restart
	done
}

install_multisite_dependencies() {
	# Install components needed by pulse multisite..."
	install_nfs_kernel_server
	install_clonezilla
}

install_multisite() {
	echo "Installing Pulse multisite..."
	apt-get -y install pulse2-package-server pulse2-imaging-server uuid-runtime
	if [ ! $? -eq 0 ]; then
		echo "pulse install failed"
		exit 1
	fi
	
	# Enable services
	sed 's/no/yes/' -i /etc/default/pulse2-package-server 
	
	echo "### Installing Pulse multisite... Done"
}

configure_multisite_dependencies() {
	#Configure components needed by pulse multisite
	configure_nfs_kernel_server
	configure_clonezilla
}

configure_glpi_multisite() {
	echo "Configuring GLPI for multisite..."
	
	# Create the multisite entity in GLPI. Done on main pulse server
	local MAX_ID=$(ssh ${PULSEMAIN_IP} "echo 'SELECT MAX(id) FROM glpi_entities;' | mysql -s glpi")
	local ID=$((MAX_ID+1))
	local GLPI_MAIN_ENTITY=$(ssh ${PULSEMAIN_IP} "echo 'SELECT completename FROM glpi_entities WHERE id='0';' | mysql -s glpi")
	local SSH_COMMAND="echo \"INSERT INTO glpi_entities (id,entities_id,level,name,completename) VALUES ('${ID}','0','2','${MULTISITE_ENTITY}','${GLPI_MAIN_ENTITY} > ${MULTISITE_ENTITY}');\" | mysql glpi"
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND}
	
	# Create fusioninventory rule to affect all computer from/to multi-site entity. Done on main pulse server
	local SSH_COMMAND_UPDATE_RANKING="echo \"UPDATE glpi_rules SET ranking = ranking+1 WHERE sub_type = 'PluginFusioninventoryInventoryRuleEntity';\" | mysql glpi"
    local SSH_COMMAND_GLPI_RULES="echo \"INSERT INTO glpi_rules VALUES ('','','PluginFusioninventoryInventoryRuleEntity',1,'${MULTISITE_ENTITY}','','AND',1,'','',0,'',0);\" | mysql glpi"
	local SSH_COMMAND_GLPI_RULECRITERIAS="echo \"INSERT INTO glpi_rulecriterias VALUES ('', (SELECT MAX(id) FROM glpi_rules WHERE sub_type = 'PluginFusioninventoryInventoryRuleEntity' ),'subnet',0,'${NETWORK_ADDRESS}');\" | mysql glpi"
	local SSH_COMMAND_GLPI_RULEACTIONS="echo \"INSERT INTO glpi_ruleactions   VALUES ('', (SELECT MAX(id) FROM glpi_rules WHERE sub_type = 'PluginFusioninventoryInventoryRuleEntity' ),'assign','entities_id',(SELECT id FROM glpi_entities WHERE name='${MULTISITE_ENTITY}'));\" | mysql glpi"
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND_UPDATE_RANKING}
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND_GLPI_RULES}
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND_GLPI_RULECRITERIAS}
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND_GLPI_RULEACTIONS}
	
	echo "###Configuring GLPI for multisite... Done"
}

configure_package_server_multisite() {
	echo "Configuring Package Server for multisite..."
	
	# Configure multi-site package server	
	local PACKAGESERVER_UUID=`uuidgen`
	# Allow computer to reach package server
	echo "[main]" > /etc/mmc/pulse2/package-server/package-server.ini.local
	echo "public_ip = ${IP_ADDRESS}" >> /etc/mmc/pulse2/package-server/package-server.ini.local
	# Define MMC of the Pulse
	echo "[mmc_agent]" >> /etc/mmc/pulse2/package-server/package-server.ini.local
	echo "host = ${PULSEMAIN_IP}" >> /etc/mmc/pulse2/package-server/package-server.ini.local
	echo "[imaging_api]" >> /etc/mmc/pulse2/package-server/package-server.ini.local
	echo "uuid = ${PACKAGESERVER_UUID}" >> /etc/mmc/pulse2/package-server/package-server.ini.local
	# Define Pulse inventory server IP
	echo "inventory_host = ${PULSEMAIN_IP}" >> /etc/mmc/pulse2/package-server/package-server.ini.local
	echo "glpi_mode = True" >> /etc/mmc/pulse2/package-server/package-server.ini.local
	
	# Enable the Pulse MMC to listen from everywhere. Done on main Pulse server
	local SSH_COMMAND="sed 's/^host = .*/host = 0.0.0.0/' -i /etc/mmc/agent/config.ini.local && service mmc-agent restart"
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND}
	
	# Insert multisite imaging server in Pulse imaging server database. Done on main Pulse server.
	local SSH_COMMAND="echo \"INSERT INTO ImagingServer (name, url, fk_default_menu, packageserver_uuid, recursive, associated, fk_language, fk_entity) VALUES ('${MULTISITE_ENTITY}', 'https://${IP_REMOTE_SERVER}:9990/imaging_api', 1, '${PACKAGESERVER_UUID}', 1, 0, 1, 1);\" | mysql imaging"
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND}
	
	# Create multisite imaging entity in Pulse imaging entities database. Done on main Pulse server
	local UUID_IMAGING=$(ssh ${PULSEMAIN_IP} "echo 'SELECT id FROM imaging.ImagingServer  ORDER BY id DESC LIMIT 1'|mysql -s")
	UUID_IMAGING='UUID'${UUID_IMAGING}
	local ID=$(ssh ${PULSEMAIN_IP} "echo 'SELECT id FROM imaging.Entity  ORDER BY id DESC LIMIT 1'|mysql -s")
	local UUID='UUID'$((ID+1))
	local SSH_COMMAND="echo \"INSERT INTO imaging.Entity values ('','${MULTISITE_ENTITY}','${UUID}','','fr_FR');\" | mysql imaging"
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND}
	# Register multisite package server in Pulse. Done on main Pulse server
	local ID=$(ssh ${PULSEMAIN_IP} "echo 'SELECT id FROM imaging.Entity  ORDER BY id DESC LIMIT 1'|mysql -s")
	local SSH_COMMAND="echo \"UPDATE ImagingServer SET associated=1, fk_entity=${ID} WHERE packageserver_uuid='${PACKAGESERVER_UUID}';\"| mysql imaging"
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND}
	
	echo "###Configuring Package Server for multisite... Done"
}

configure_multisite() {
	# Grant ssh without password from Pulse multisite to Pulse 
	ssh-keyscan ${PULSEMAIN_IP} >> /root/.ssh/known_hosts
	ssh-copy-id ${PULSEMAIN_IP}
	
	configure_glpi_multisite
	configure_package_server_multisite
	
	echo "### Restart pulse2-package-server..."
	service pulse2-package-server restart
}

sync_package_server() {
	# Enable package synchronisation between Pulse package server and multisite(s) packager server

	# Grant ssh without password from Pulse to Pulse multisite. Done on Pulse main server.
	ssh -t ${PULSEMAIN_IP} ssh-copy-id ${IP_REMOTE_SERVER}
	local SSH_COMMAND="[ ! -d /var/data/mmc ] && mkdir -p /var/data/mmc/"
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND}

	# Test if the sync configuration is already configured on Pulse. Done on Pulse main server.
	SSH_COMMAND='grep -Gq "^package_detect_activate = 1" /etc/mmc/pulse2/package-server/package-server.ini.local'
	ssh ${PULSEMAIN_IP} ${SSH_COMMAND}

	# Enable sync configuration or add ip address for multiple multisite package server. Done on Pulse main server.
	if [ $? -ne 0 ]; then
		local SYNC_CONF="sed -i '1 a\\
# Sync package server \\
package_detect_activate = 1 \\
package_detect_loop = 60 \\
package_mirror_loop = 5 \\
package_mirror_target = ${IP_REMOTE_SERVER} \\
package_mirror_command = /usr/bin/rsync \\
package_mirror_command_options = -ar --delete \\
package_mirror_level0_command_options = -d --delete \\
package_mirror_command_options_ssh_options = IdentityFile=/root/.ssh/id_rsa StrictHostKeyChecking=no Batchmode=yes PasswordAuthentication=no ServerAliveInterval=10 CheckHostIP=no ConnectTimeout=10 \\
# END Sync' /etc/mmc/pulse2/package-server/package-server.ini.local"
		ssh ${PULSEMAIN_IP} "${SYNC_CONF}"
	else
		SYNC_CONF="sed '/^package_mirror_target.*/ s/$/ ${IP_REMOTE_SERVER}/' -i /etc/mmc/pulse2/package-server/package-server.ini.local"
		ssh ${PULSEMAIN_IP} "${SYNC_CONF}"
	fi
}

# And finally we run the functions

get_user_options
check_network_config
prepare_debian

if [[ ${INSTALL_TYPE} == "p" ]]; then
	# Pulse main installation
	install_pulse_dependencies
	install_pulse
	if [[ ${MAIN_DHCP} == "y" ]]; then
		install_isc_dhcp_server
		configure_isc_dhcp_server
	fi
	if [[ ${MAIN_PXE} == "y" ]]; then
		install_atftpd
		configure_atftpd
	fi
	configure_pulse_dependencies
	configure_pulse
else
	# Pulse multi-site installation
	install_multisite_dependencies
	install_multisite
	configure_multisite_dependencies
	configure_multisite
	sync_package_server
	if [[ ${REMOTE_BACKUPPC} == "y" ]]; then
		install_backuppc
		configure_backuppc 
	fi
	if [[ ${REMOTE_DHCP} == "y" ]]; then
		install_isc_dhcp_server
		configure_isc_dhcp_server
	fi
	if [[ ${REMOTE_PXE} == "y" ]]; then
		install_atftpd
		configure_atftpd
	fi
fi
